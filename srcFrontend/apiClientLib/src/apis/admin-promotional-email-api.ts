/* tslint:disable */
/* eslint-disable */
/**
 * Algol WC Wishlist
 * Algol WC Wishlist
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse200 } from '../models';
import { InlineResponse2001 } from '../models';
import { InlineResponse2002 } from '../models';
import { PromotionalEmailCalculateEmailReceiversRequest } from '../models';
import { PromotionalEmailPreviewRequest } from '../models';
import { PromotionalEmailRequest } from '../models';
/**
 * AdminPromotionalEmailApi - axios parameter creator
 * @export
 */
export const AdminPromotionalEmailApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {PromotionalEmailPreviewRequest} body Email body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPreviewPromotionalEmail: async (body: PromotionalEmailPreviewRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling adminPreviewPromotionalEmail.');
            }
            const localVarPath = `/admin/promotional-email/preview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-WP-Nonce")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-WP-Nonce"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PromotionalEmailRequest} body Email body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminSaveDraftPromotionalEmail: async (body: PromotionalEmailRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling adminSaveDraftPromotionalEmail.');
            }
            const localVarPath = `/admin/promotional-email/save-draft`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-WP-Nonce")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-WP-Nonce"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PromotionalEmailRequest} body Email body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminSendPromotionalEmail: async (body: PromotionalEmailRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling adminSendPromotionalEmail.');
            }
            const localVarPath = `/admin/promotional-email/send`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-WP-Nonce")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-WP-Nonce"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PromotionalEmailCalculateEmailReceiversRequest} body Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        admincalculateEmailReceiversPromotionalEmail: async (body: PromotionalEmailCalculateEmailReceiversRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling admincalculateEmailReceiversPromotionalEmail.');
            }
            const localVarPath = `/admin/promotional-email/calculate-email-receivers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-WP-Nonce")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-WP-Nonce"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminPromotionalEmailApi - functional programming interface
 * @export
 */
export const AdminPromotionalEmailApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {PromotionalEmailPreviewRequest} body Email body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPreviewPromotionalEmail(body: PromotionalEmailPreviewRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200>>> {
            const localVarAxiosArgs = await AdminPromotionalEmailApiAxiosParamCreator(configuration).adminPreviewPromotionalEmail(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {PromotionalEmailRequest} body Email body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminSaveDraftPromotionalEmail(body: PromotionalEmailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2001>>> {
            const localVarAxiosArgs = await AdminPromotionalEmailApiAxiosParamCreator(configuration).adminSaveDraftPromotionalEmail(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {PromotionalEmailRequest} body Email body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminSendPromotionalEmail(body: PromotionalEmailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2001>>> {
            const localVarAxiosArgs = await AdminPromotionalEmailApiAxiosParamCreator(configuration).adminSendPromotionalEmail(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {PromotionalEmailCalculateEmailReceiversRequest} body Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async admincalculateEmailReceiversPromotionalEmail(body: PromotionalEmailCalculateEmailReceiversRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2002>>> {
            const localVarAxiosArgs = await AdminPromotionalEmailApiAxiosParamCreator(configuration).admincalculateEmailReceiversPromotionalEmail(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AdminPromotionalEmailApi - factory interface
 * @export
 */
export const AdminPromotionalEmailApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {PromotionalEmailPreviewRequest} body Email body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPreviewPromotionalEmail(body: PromotionalEmailPreviewRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200>> {
            return AdminPromotionalEmailApiFp(configuration).adminPreviewPromotionalEmail(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PromotionalEmailRequest} body Email body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminSaveDraftPromotionalEmail(body: PromotionalEmailRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2001>> {
            return AdminPromotionalEmailApiFp(configuration).adminSaveDraftPromotionalEmail(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PromotionalEmailRequest} body Email body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminSendPromotionalEmail(body: PromotionalEmailRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2001>> {
            return AdminPromotionalEmailApiFp(configuration).adminSendPromotionalEmail(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PromotionalEmailCalculateEmailReceiversRequest} body Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async admincalculateEmailReceiversPromotionalEmail(body: PromotionalEmailCalculateEmailReceiversRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2002>> {
            return AdminPromotionalEmailApiFp(configuration).admincalculateEmailReceiversPromotionalEmail(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminPromotionalEmailApi - object-oriented interface
 * @export
 * @class AdminPromotionalEmailApi
 * @extends {BaseAPI}
 */
export class AdminPromotionalEmailApi extends BaseAPI {
    /**
     * 
     * @param {PromotionalEmailPreviewRequest} body Email body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminPromotionalEmailApi
     */
    public async adminPreviewPromotionalEmail(body: PromotionalEmailPreviewRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200>> {
        return AdminPromotionalEmailApiFp(this.configuration).adminPreviewPromotionalEmail(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {PromotionalEmailRequest} body Email body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminPromotionalEmailApi
     */
    public async adminSaveDraftPromotionalEmail(body: PromotionalEmailRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2001>> {
        return AdminPromotionalEmailApiFp(this.configuration).adminSaveDraftPromotionalEmail(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {PromotionalEmailRequest} body Email body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminPromotionalEmailApi
     */
    public async adminSendPromotionalEmail(body: PromotionalEmailRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2001>> {
        return AdminPromotionalEmailApiFp(this.configuration).adminSendPromotionalEmail(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {PromotionalEmailCalculateEmailReceiversRequest} body Body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminPromotionalEmailApi
     */
    public async admincalculateEmailReceiversPromotionalEmail(body: PromotionalEmailCalculateEmailReceiversRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2002>> {
        return AdminPromotionalEmailApiFp(this.configuration).admincalculateEmailReceiversPromotionalEmail(body, options).then((request) => request(this.axios, this.basePath));
    }
}
