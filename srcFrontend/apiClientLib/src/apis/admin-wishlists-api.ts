/* tslint:disable */
/* eslint-disable */
/**
 * Algol WC Wishlist
 * Algol WC Wishlist
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AdminGetWishlistsResponse } from '../models';
import { Wishlist } from '../models';
import { WishlistAdminRequest } from '../models';
/**
 * AdminWishlistsApi - axios parameter creator
 * @export
 */
export const AdminWishlistsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a new wishlist as admin
         * @param {WishlistAdminRequest} body Wishlist object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminAddWishlist: async (body: WishlistAdminRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling adminAddWishlist.');
            }
            const localVarPath = `/admin/wishlists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-WP-Nonce")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-WP-Nonce"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete the wishlist as admin
         * @param {number} wishlistId ID of wishlist to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteWishlist: async (wishlistId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'wishlistId' is not null or undefined
            if (wishlistId === null || wishlistId === undefined) {
                throw new RequiredError('wishlistId','Required parameter wishlistId was null or undefined when calling adminDeleteWishlist.');
            }
            const localVarPath = `/admin/wishlists/{wishlistId}`
                .replace(`{${"wishlistId"}}`, encodeURIComponent(String(wishlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-WP-Nonce")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-WP-Nonce"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all wishlists for admin
         * @param {number} page Page
         * @param {number} itemsPerPage Maximum number of items to be returned in result set
         * @param {string} [sortField] Sort field
         * @param {string} [sort] Sort modifier: DESC or ASC
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetAllWishlists: async (page: number, itemsPerPage: number, sortField?: string, sort?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling adminGetAllWishlists.');
            }
            // verify required parameter 'itemsPerPage' is not null or undefined
            if (itemsPerPage === null || itemsPerPage === undefined) {
                throw new RequiredError('itemsPerPage','Required parameter itemsPerPage was null or undefined when calling adminGetAllWishlists.');
            }
            const localVarPath = `/admin/wishlists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-WP-Nonce")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-WP-Nonce"] = localVarApiKeyValue;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['sortField'] = sortField;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single wishlist for admin
         * @param {number} wishlistId ID of wishlist to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetWishlistById: async (wishlistId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'wishlistId' is not null or undefined
            if (wishlistId === null || wishlistId === undefined) {
                throw new RequiredError('wishlistId','Required parameter wishlistId was null or undefined when calling adminGetWishlistById.');
            }
            const localVarPath = `/admin/wishlists/{wishlistId}`
                .replace(`{${"wishlistId"}}`, encodeURIComponent(String(wishlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-WP-Nonce")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-WP-Nonce"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the wishlist as admin
         * @param {WishlistAdminRequest} body Wishlist object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdateWishlist: async (body: WishlistAdminRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling adminUpdateWishlist.');
            }
            const localVarPath = `/admin/wishlists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-WP-Nonce")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-WP-Nonce"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminWishlistsApi - functional programming interface
 * @export
 */
export const AdminWishlistsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Add a new wishlist as admin
         * @param {WishlistAdminRequest} body Wishlist object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminAddWishlist(body: WishlistAdminRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Wishlist>>> {
            const localVarAxiosArgs = await AdminWishlistsApiAxiosParamCreator(configuration).adminAddWishlist(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete the wishlist as admin
         * @param {number} wishlistId ID of wishlist to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminDeleteWishlist(wishlistId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AdminWishlistsApiAxiosParamCreator(configuration).adminDeleteWishlist(wishlistId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get all wishlists for admin
         * @param {number} page Page
         * @param {number} itemsPerPage Maximum number of items to be returned in result set
         * @param {string} [sortField] Sort field
         * @param {string} [sort] Sort modifier: DESC or ASC
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetAllWishlists(page: number, itemsPerPage: number, sortField?: string, sort?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminGetWishlistsResponse>>> {
            const localVarAxiosArgs = await AdminWishlistsApiAxiosParamCreator(configuration).adminGetAllWishlists(page, itemsPerPage, sortField, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a single wishlist for admin
         * @param {number} wishlistId ID of wishlist to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetWishlistById(wishlistId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Wishlist>>> {
            const localVarAxiosArgs = await AdminWishlistsApiAxiosParamCreator(configuration).adminGetWishlistById(wishlistId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update the wishlist as admin
         * @param {WishlistAdminRequest} body Wishlist object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminUpdateWishlist(body: WishlistAdminRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Wishlist>>> {
            const localVarAxiosArgs = await AdminWishlistsApiAxiosParamCreator(configuration).adminUpdateWishlist(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AdminWishlistsApi - factory interface
 * @export
 */
export const AdminWishlistsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Add a new wishlist as admin
         * @param {WishlistAdminRequest} body Wishlist object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminAddWishlist(body: WishlistAdminRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<Wishlist>> {
            return AdminWishlistsApiFp(configuration).adminAddWishlist(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete the wishlist as admin
         * @param {number} wishlistId ID of wishlist to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminDeleteWishlist(wishlistId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AdminWishlistsApiFp(configuration).adminDeleteWishlist(wishlistId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all wishlists for admin
         * @param {number} page Page
         * @param {number} itemsPerPage Maximum number of items to be returned in result set
         * @param {string} [sortField] Sort field
         * @param {string} [sort] Sort modifier: DESC or ASC
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetAllWishlists(page: number, itemsPerPage: number, sortField?: string, sort?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminGetWishlistsResponse>> {
            return AdminWishlistsApiFp(configuration).adminGetAllWishlists(page, itemsPerPage, sortField, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single wishlist for admin
         * @param {number} wishlistId ID of wishlist to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetWishlistById(wishlistId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Wishlist>> {
            return AdminWishlistsApiFp(configuration).adminGetWishlistById(wishlistId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the wishlist as admin
         * @param {WishlistAdminRequest} body Wishlist object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminUpdateWishlist(body: WishlistAdminRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<Wishlist>> {
            return AdminWishlistsApiFp(configuration).adminUpdateWishlist(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminWishlistsApi - object-oriented interface
 * @export
 * @class AdminWishlistsApi
 * @extends {BaseAPI}
 */
export class AdminWishlistsApi extends BaseAPI {
    /**
     * Add a new wishlist as admin
     * @param {WishlistAdminRequest} body Wishlist object that needs to be added
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminWishlistsApi
     */
    public async adminAddWishlist(body: WishlistAdminRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<Wishlist>> {
        return AdminWishlistsApiFp(this.configuration).adminAddWishlist(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete the wishlist as admin
     * @param {number} wishlistId ID of wishlist to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminWishlistsApi
     */
    public async adminDeleteWishlist(wishlistId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AdminWishlistsApiFp(this.configuration).adminDeleteWishlist(wishlistId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all wishlists for admin
     * @param {number} page Page
     * @param {number} itemsPerPage Maximum number of items to be returned in result set
     * @param {string} [sortField] Sort field
     * @param {string} [sort] Sort modifier: DESC or ASC
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminWishlistsApi
     */
    public async adminGetAllWishlists(page: number, itemsPerPage: number, sortField?: string, sort?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminGetWishlistsResponse>> {
        return AdminWishlistsApiFp(this.configuration).adminGetAllWishlists(page, itemsPerPage, sortField, sort, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a single wishlist for admin
     * @param {number} wishlistId ID of wishlist to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminWishlistsApi
     */
    public async adminGetWishlistById(wishlistId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Wishlist>> {
        return AdminWishlistsApiFp(this.configuration).adminGetWishlistById(wishlistId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update the wishlist as admin
     * @param {WishlistAdminRequest} body Wishlist object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminWishlistsApi
     */
    public async adminUpdateWishlist(body: WishlistAdminRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<Wishlist>> {
        return AdminWishlistsApiFp(this.configuration).adminUpdateWishlist(body, options).then((request) => request(this.axios, this.basePath));
    }
}
