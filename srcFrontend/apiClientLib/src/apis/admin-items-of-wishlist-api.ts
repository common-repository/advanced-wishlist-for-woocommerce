/* tslint:disable */
/* eslint-disable */
/**
 * Algol WC Wishlist
 * Algol WC Wishlist
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ExtendedItemOfWishlist } from '../models';
import { ItemOfWishlist } from '../models';
import { ItemOfWishlistRequest } from '../models';
/**
 * AdminItemsOfWishlistApi - axios parameter creator
 * @export
 */
export const AdminItemsOfWishlistApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ItemOfWishlistRequest} body A wishlist item object that needs to be added
         * @param {number} wishlistId ID of wishlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminAddItemOfWishlistById: async (body: ItemOfWishlistRequest, wishlistId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling adminAddItemOfWishlistById.');
            }
            // verify required parameter 'wishlistId' is not null or undefined
            if (wishlistId === null || wishlistId === undefined) {
                throw new RequiredError('wishlistId','Required parameter wishlistId was null or undefined when calling adminAddItemOfWishlistById.');
            }
            const localVarPath = `/admin/wishlists/{wishlistId}/items`
                .replace(`{${"wishlistId"}}`, encodeURIComponent(String(wishlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-WP-Nonce")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-WP-Nonce"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} wishlistId ID of wishlist
         * @param {number} itemId ID of item from wishlist to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteItemOfWishlistById: async (wishlistId: number, itemId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'wishlistId' is not null or undefined
            if (wishlistId === null || wishlistId === undefined) {
                throw new RequiredError('wishlistId','Required parameter wishlistId was null or undefined when calling adminDeleteItemOfWishlistById.');
            }
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling adminDeleteItemOfWishlistById.');
            }
            const localVarPath = `/admin/wishlists/{wishlistId}/items/{itemId}`
                .replace(`{${"wishlistId"}}`, encodeURIComponent(String(wishlistId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-WP-Nonce")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-WP-Nonce"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} wishlistId ID of wishlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetAllItemOfWishlist: async (wishlistId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'wishlistId' is not null or undefined
            if (wishlistId === null || wishlistId === undefined) {
                throw new RequiredError('wishlistId','Required parameter wishlistId was null or undefined when calling adminGetAllItemOfWishlist.');
            }
            const localVarPath = `/admin/wishlists/{wishlistId}/items`
                .replace(`{${"wishlistId"}}`, encodeURIComponent(String(wishlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-WP-Nonce")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-WP-Nonce"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} wishlistId ID of wishlist
         * @param {number} itemId ID of item from wishlist to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetItemOfWishlistById: async (wishlistId: number, itemId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'wishlistId' is not null or undefined
            if (wishlistId === null || wishlistId === undefined) {
                throw new RequiredError('wishlistId','Required parameter wishlistId was null or undefined when calling adminGetItemOfWishlistById.');
            }
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling adminGetItemOfWishlistById.');
            }
            const localVarPath = `/admin/wishlists/{wishlistId}/items/{itemId}`
                .replace(`{${"wishlistId"}}`, encodeURIComponent(String(wishlistId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-WP-Nonce")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-WP-Nonce"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ItemOfWishlistRequest} body A wishlist item object that needs to be updated
         * @param {number} wishlistId ID of wishlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdateItemOfWishlistById: async (body: ItemOfWishlistRequest, wishlistId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling adminUpdateItemOfWishlistById.');
            }
            // verify required parameter 'wishlistId' is not null or undefined
            if (wishlistId === null || wishlistId === undefined) {
                throw new RequiredError('wishlistId','Required parameter wishlistId was null or undefined when calling adminUpdateItemOfWishlistById.');
            }
            const localVarPath = `/admin/wishlists/{wishlistId}/items`
                .replace(`{${"wishlistId"}}`, encodeURIComponent(String(wishlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-WP-Nonce")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-WP-Nonce"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminItemsOfWishlistApi - functional programming interface
 * @export
 */
export const AdminItemsOfWishlistApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ItemOfWishlistRequest} body A wishlist item object that needs to be added
         * @param {number} wishlistId ID of wishlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminAddItemOfWishlistById(body: ItemOfWishlistRequest, wishlistId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ItemOfWishlist>>> {
            const localVarAxiosArgs = await AdminItemsOfWishlistApiAxiosParamCreator(configuration).adminAddItemOfWishlistById(body, wishlistId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} wishlistId ID of wishlist
         * @param {number} itemId ID of item from wishlist to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminDeleteItemOfWishlistById(wishlistId: number, itemId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AdminItemsOfWishlistApiAxiosParamCreator(configuration).adminDeleteItemOfWishlistById(wishlistId, itemId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} wishlistId ID of wishlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetAllItemOfWishlist(wishlistId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<ExtendedItemOfWishlist>>>> {
            const localVarAxiosArgs = await AdminItemsOfWishlistApiAxiosParamCreator(configuration).adminGetAllItemOfWishlist(wishlistId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} wishlistId ID of wishlist
         * @param {number} itemId ID of item from wishlist to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetItemOfWishlistById(wishlistId: number, itemId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ItemOfWishlist>>> {
            const localVarAxiosArgs = await AdminItemsOfWishlistApiAxiosParamCreator(configuration).adminGetItemOfWishlistById(wishlistId, itemId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {ItemOfWishlistRequest} body A wishlist item object that needs to be updated
         * @param {number} wishlistId ID of wishlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminUpdateItemOfWishlistById(body: ItemOfWishlistRequest, wishlistId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ItemOfWishlist>>> {
            const localVarAxiosArgs = await AdminItemsOfWishlistApiAxiosParamCreator(configuration).adminUpdateItemOfWishlistById(body, wishlistId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AdminItemsOfWishlistApi - factory interface
 * @export
 */
export const AdminItemsOfWishlistApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {ItemOfWishlistRequest} body A wishlist item object that needs to be added
         * @param {number} wishlistId ID of wishlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminAddItemOfWishlistById(body: ItemOfWishlistRequest, wishlistId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<ItemOfWishlist>> {
            return AdminItemsOfWishlistApiFp(configuration).adminAddItemOfWishlistById(body, wishlistId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} wishlistId ID of wishlist
         * @param {number} itemId ID of item from wishlist to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminDeleteItemOfWishlistById(wishlistId: number, itemId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AdminItemsOfWishlistApiFp(configuration).adminDeleteItemOfWishlistById(wishlistId, itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} wishlistId ID of wishlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetAllItemOfWishlist(wishlistId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<ExtendedItemOfWishlist>>> {
            return AdminItemsOfWishlistApiFp(configuration).adminGetAllItemOfWishlist(wishlistId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} wishlistId ID of wishlist
         * @param {number} itemId ID of item from wishlist to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetItemOfWishlistById(wishlistId: number, itemId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<ItemOfWishlist>> {
            return AdminItemsOfWishlistApiFp(configuration).adminGetItemOfWishlistById(wishlistId, itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ItemOfWishlistRequest} body A wishlist item object that needs to be updated
         * @param {number} wishlistId ID of wishlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminUpdateItemOfWishlistById(body: ItemOfWishlistRequest, wishlistId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<ItemOfWishlist>> {
            return AdminItemsOfWishlistApiFp(configuration).adminUpdateItemOfWishlistById(body, wishlistId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminItemsOfWishlistApi - object-oriented interface
 * @export
 * @class AdminItemsOfWishlistApi
 * @extends {BaseAPI}
 */
export class AdminItemsOfWishlistApi extends BaseAPI {
    /**
     * 
     * @param {ItemOfWishlistRequest} body A wishlist item object that needs to be added
     * @param {number} wishlistId ID of wishlist
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminItemsOfWishlistApi
     */
    public async adminAddItemOfWishlistById(body: ItemOfWishlistRequest, wishlistId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<ItemOfWishlist>> {
        return AdminItemsOfWishlistApiFp(this.configuration).adminAddItemOfWishlistById(body, wishlistId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} wishlistId ID of wishlist
     * @param {number} itemId ID of item from wishlist to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminItemsOfWishlistApi
     */
    public async adminDeleteItemOfWishlistById(wishlistId: number, itemId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AdminItemsOfWishlistApiFp(this.configuration).adminDeleteItemOfWishlistById(wishlistId, itemId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} wishlistId ID of wishlist
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminItemsOfWishlistApi
     */
    public async adminGetAllItemOfWishlist(wishlistId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<ExtendedItemOfWishlist>>> {
        return AdminItemsOfWishlistApiFp(this.configuration).adminGetAllItemOfWishlist(wishlistId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} wishlistId ID of wishlist
     * @param {number} itemId ID of item from wishlist to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminItemsOfWishlistApi
     */
    public async adminGetItemOfWishlistById(wishlistId: number, itemId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<ItemOfWishlist>> {
        return AdminItemsOfWishlistApiFp(this.configuration).adminGetItemOfWishlistById(wishlistId, itemId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {ItemOfWishlistRequest} body A wishlist item object that needs to be updated
     * @param {number} wishlistId ID of wishlist
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminItemsOfWishlistApi
     */
    public async adminUpdateItemOfWishlistById(body: ItemOfWishlistRequest, wishlistId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<ItemOfWishlist>> {
        return AdminItemsOfWishlistApiFp(this.configuration).adminUpdateItemOfWishlistById(body, wishlistId, options).then((request) => request(this.axios, this.basePath));
    }
}
