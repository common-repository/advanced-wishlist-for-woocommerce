/* tslint:disable */
/* eslint-disable */
/**
 * Algol WC Wishlist
 * Algol WC Wishlist
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AddIntoDefaultWishlistRequest } from '../models';
import { AddToCartAllItemsOfWishlistRequest } from '../models';
import { AddToCartItemOfWishlistRequest } from '../models';
import { BatchAddToCartItemsOfWishlistRequest } from '../models';
import { BatchDeleteItemsOfWishlistRequest } from '../models';
import { ExecuteActionsOnItemsOfWishlistResponse } from '../models';
import { ExtendedItemOfWishlist } from '../models';
import { ItemOfWishlist } from '../models';
import { ItemOfWishlistRequest } from '../models';
import { ReorderItemsOfWishlistRequest } from '../models';
/**
 * ItemsOfWishlistApi - axios parameter creator
 * @export
 */
export const ItemsOfWishlistApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AddIntoDefaultWishlistRequest} body A wishlist item object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addItemIntoDefaultWishlist: async (body: AddIntoDefaultWishlistRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addItemIntoDefaultWishlist.');
            }
            const localVarPath = `/wishlists/default/items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-WP-Nonce")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-WP-Nonce"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ItemOfWishlistRequest} body A wishlist item object that needs to be added
         * @param {number} wishlistId ID of wishlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addItemOfWishlistById: async (body: ItemOfWishlistRequest, wishlistId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addItemOfWishlistById.');
            }
            // verify required parameter 'wishlistId' is not null or undefined
            if (wishlistId === null || wishlistId === undefined) {
                throw new RequiredError('wishlistId','Required parameter wishlistId was null or undefined when calling addItemOfWishlistById.');
            }
            const localVarPath = `/wishlists/{wishlistId}/items`
                .replace(`{${"wishlistId"}}`, encodeURIComponent(String(wishlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-WP-Nonce")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-WP-Nonce"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AddToCartAllItemsOfWishlistRequest} body An action object
         * @param {number} wishlistId ID of wishlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToCartAllItemsOfWishlist: async (body: AddToCartAllItemsOfWishlistRequest, wishlistId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addToCartAllItemsOfWishlist.');
            }
            // verify required parameter 'wishlistId' is not null or undefined
            if (wishlistId === null || wishlistId === undefined) {
                throw new RequiredError('wishlistId','Required parameter wishlistId was null or undefined when calling addToCartAllItemsOfWishlist.');
            }
            const localVarPath = `/wishlists/{wishlistId}/items/action/add-to-cart-all`
                .replace(`{${"wishlistId"}}`, encodeURIComponent(String(wishlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-WP-Nonce")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-WP-Nonce"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AddToCartItemOfWishlistRequest} body An action object
         * @param {number} wishlistId ID of wishlist
         * @param {number} itemId ID of item from wishlist to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToCartItemOfWishlist: async (body: AddToCartItemOfWishlistRequest, wishlistId: number, itemId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addToCartItemOfWishlist.');
            }
            // verify required parameter 'wishlistId' is not null or undefined
            if (wishlistId === null || wishlistId === undefined) {
                throw new RequiredError('wishlistId','Required parameter wishlistId was null or undefined when calling addToCartItemOfWishlist.');
            }
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling addToCartItemOfWishlist.');
            }
            const localVarPath = `/wishlists/{wishlistId}/items/{itemId}/action/add-to-cart`
                .replace(`{${"wishlistId"}}`, encodeURIComponent(String(wishlistId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-WP-Nonce")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-WP-Nonce"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BatchAddToCartItemsOfWishlistRequest} body An action object
         * @param {number} wishlistId ID of wishlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchAddToCartItemsOfWishlist: async (body: BatchAddToCartItemsOfWishlistRequest, wishlistId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling batchAddToCartItemsOfWishlist.');
            }
            // verify required parameter 'wishlistId' is not null or undefined
            if (wishlistId === null || wishlistId === undefined) {
                throw new RequiredError('wishlistId','Required parameter wishlistId was null or undefined when calling batchAddToCartItemsOfWishlist.');
            }
            const localVarPath = `/wishlists/{wishlistId}/items/action/batch-add-to-cart`
                .replace(`{${"wishlistId"}}`, encodeURIComponent(String(wishlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-WP-Nonce")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-WP-Nonce"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BatchDeleteItemsOfWishlistRequest} body An action object
         * @param {number} wishlistId ID of wishlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchDeleteItemsOfWishlist: async (body: BatchDeleteItemsOfWishlistRequest, wishlistId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling batchDeleteItemsOfWishlist.');
            }
            // verify required parameter 'wishlistId' is not null or undefined
            if (wishlistId === null || wishlistId === undefined) {
                throw new RequiredError('wishlistId','Required parameter wishlistId was null or undefined when calling batchDeleteItemsOfWishlist.');
            }
            const localVarPath = `/wishlists/{wishlistId}/items/action/batch-delete`
                .replace(`{${"wishlistId"}}`, encodeURIComponent(String(wishlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-WP-Nonce")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-WP-Nonce"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} itemId ID of item from wishlist to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemOfDefaultWishlistById: async (itemId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling deleteItemOfDefaultWishlistById.');
            }
            const localVarPath = `/wishlists/default/items/{itemId}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-WP-Nonce")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-WP-Nonce"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} wishlistId ID of wishlist
         * @param {number} itemId ID of item from wishlist to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemOfWishlistById: async (wishlistId: number, itemId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'wishlistId' is not null or undefined
            if (wishlistId === null || wishlistId === undefined) {
                throw new RequiredError('wishlistId','Required parameter wishlistId was null or undefined when calling deleteItemOfWishlistById.');
            }
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling deleteItemOfWishlistById.');
            }
            const localVarPath = `/wishlists/{wishlistId}/items/{itemId}`
                .replace(`{${"wishlistId"}}`, encodeURIComponent(String(wishlistId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-WP-Nonce")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-WP-Nonce"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} wishlistId ID of wishlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllItemOfWishlist: async (wishlistId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'wishlistId' is not null or undefined
            if (wishlistId === null || wishlistId === undefined) {
                throw new RequiredError('wishlistId','Required parameter wishlistId was null or undefined when calling getAllItemOfWishlist.');
            }
            const localVarPath = `/wishlists/{wishlistId}/items`
                .replace(`{${"wishlistId"}}`, encodeURIComponent(String(wishlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-WP-Nonce")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-WP-Nonce"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} wishlistId ID of wishlist
         * @param {number} itemId ID of item from wishlist to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemOfWishlistById: async (wishlistId: number, itemId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'wishlistId' is not null or undefined
            if (wishlistId === null || wishlistId === undefined) {
                throw new RequiredError('wishlistId','Required parameter wishlistId was null or undefined when calling getItemOfWishlistById.');
            }
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling getItemOfWishlistById.');
            }
            const localVarPath = `/wishlists/{wishlistId}/items/{itemId}`
                .replace(`{${"wishlistId"}}`, encodeURIComponent(String(wishlistId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-WP-Nonce")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-WP-Nonce"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ReorderItemsOfWishlistRequest} body An action object
         * @param {number} wishlistId ID of wishlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reorderItemsOfWishlist: async (body: ReorderItemsOfWishlistRequest, wishlistId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling reorderItemsOfWishlist.');
            }
            // verify required parameter 'wishlistId' is not null or undefined
            if (wishlistId === null || wishlistId === undefined) {
                throw new RequiredError('wishlistId','Required parameter wishlistId was null or undefined when calling reorderItemsOfWishlist.');
            }
            const localVarPath = `/wishlists/{wishlistId}/items/action/reorder`
                .replace(`{${"wishlistId"}}`, encodeURIComponent(String(wishlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-WP-Nonce")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-WP-Nonce"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ItemOfWishlistRequest} body A wishlist item object that needs to be updated
         * @param {number} wishlistId ID of wishlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItemOfWishlistById: async (body: ItemOfWishlistRequest, wishlistId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateItemOfWishlistById.');
            }
            // verify required parameter 'wishlistId' is not null or undefined
            if (wishlistId === null || wishlistId === undefined) {
                throw new RequiredError('wishlistId','Required parameter wishlistId was null or undefined when calling updateItemOfWishlistById.');
            }
            const localVarPath = `/wishlists/{wishlistId}/items`
                .replace(`{${"wishlistId"}}`, encodeURIComponent(String(wishlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-WP-Nonce")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-WP-Nonce"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ItemsOfWishlistApi - functional programming interface
 * @export
 */
export const ItemsOfWishlistApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AddIntoDefaultWishlistRequest} body A wishlist item object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addItemIntoDefaultWishlist(body: AddIntoDefaultWishlistRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ItemOfWishlist>>> {
            const localVarAxiosArgs = await ItemsOfWishlistApiAxiosParamCreator(configuration).addItemIntoDefaultWishlist(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {ItemOfWishlistRequest} body A wishlist item object that needs to be added
         * @param {number} wishlistId ID of wishlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addItemOfWishlistById(body: ItemOfWishlistRequest, wishlistId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ItemOfWishlist>>> {
            const localVarAxiosArgs = await ItemsOfWishlistApiAxiosParamCreator(configuration).addItemOfWishlistById(body, wishlistId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {AddToCartAllItemsOfWishlistRequest} body An action object
         * @param {number} wishlistId ID of wishlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addToCartAllItemsOfWishlist(body: AddToCartAllItemsOfWishlistRequest, wishlistId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ExecuteActionsOnItemsOfWishlistResponse>>> {
            const localVarAxiosArgs = await ItemsOfWishlistApiAxiosParamCreator(configuration).addToCartAllItemsOfWishlist(body, wishlistId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {AddToCartItemOfWishlistRequest} body An action object
         * @param {number} wishlistId ID of wishlist
         * @param {number} itemId ID of item from wishlist to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addToCartItemOfWishlist(body: AddToCartItemOfWishlistRequest, wishlistId: number, itemId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ExecuteActionsOnItemsOfWishlistResponse>>> {
            const localVarAxiosArgs = await ItemsOfWishlistApiAxiosParamCreator(configuration).addToCartItemOfWishlist(body, wishlistId, itemId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {BatchAddToCartItemsOfWishlistRequest} body An action object
         * @param {number} wishlistId ID of wishlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async batchAddToCartItemsOfWishlist(body: BatchAddToCartItemsOfWishlistRequest, wishlistId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ExecuteActionsOnItemsOfWishlistResponse>>> {
            const localVarAxiosArgs = await ItemsOfWishlistApiAxiosParamCreator(configuration).batchAddToCartItemsOfWishlist(body, wishlistId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {BatchDeleteItemsOfWishlistRequest} body An action object
         * @param {number} wishlistId ID of wishlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async batchDeleteItemsOfWishlist(body: BatchDeleteItemsOfWishlistRequest, wishlistId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ExecuteActionsOnItemsOfWishlistResponse>>> {
            const localVarAxiosArgs = await ItemsOfWishlistApiAxiosParamCreator(configuration).batchDeleteItemsOfWishlist(body, wishlistId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} itemId ID of item from wishlist to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteItemOfDefaultWishlistById(itemId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ItemsOfWishlistApiAxiosParamCreator(configuration).deleteItemOfDefaultWishlistById(itemId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} wishlistId ID of wishlist
         * @param {number} itemId ID of item from wishlist to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteItemOfWishlistById(wishlistId: number, itemId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ItemsOfWishlistApiAxiosParamCreator(configuration).deleteItemOfWishlistById(wishlistId, itemId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} wishlistId ID of wishlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllItemOfWishlist(wishlistId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<ExtendedItemOfWishlist>>>> {
            const localVarAxiosArgs = await ItemsOfWishlistApiAxiosParamCreator(configuration).getAllItemOfWishlist(wishlistId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} wishlistId ID of wishlist
         * @param {number} itemId ID of item from wishlist to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemOfWishlistById(wishlistId: number, itemId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ItemOfWishlist>>> {
            const localVarAxiosArgs = await ItemsOfWishlistApiAxiosParamCreator(configuration).getItemOfWishlistById(wishlistId, itemId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {ReorderItemsOfWishlistRequest} body An action object
         * @param {number} wishlistId ID of wishlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reorderItemsOfWishlist(body: ReorderItemsOfWishlistRequest, wishlistId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ExecuteActionsOnItemsOfWishlistResponse>>> {
            const localVarAxiosArgs = await ItemsOfWishlistApiAxiosParamCreator(configuration).reorderItemsOfWishlist(body, wishlistId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {ItemOfWishlistRequest} body A wishlist item object that needs to be updated
         * @param {number} wishlistId ID of wishlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateItemOfWishlistById(body: ItemOfWishlistRequest, wishlistId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ItemOfWishlist>>> {
            const localVarAxiosArgs = await ItemsOfWishlistApiAxiosParamCreator(configuration).updateItemOfWishlistById(body, wishlistId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ItemsOfWishlistApi - factory interface
 * @export
 */
export const ItemsOfWishlistApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {AddIntoDefaultWishlistRequest} body A wishlist item object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addItemIntoDefaultWishlist(body: AddIntoDefaultWishlistRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<ItemOfWishlist>> {
            return ItemsOfWishlistApiFp(configuration).addItemIntoDefaultWishlist(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ItemOfWishlistRequest} body A wishlist item object that needs to be added
         * @param {number} wishlistId ID of wishlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addItemOfWishlistById(body: ItemOfWishlistRequest, wishlistId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<ItemOfWishlist>> {
            return ItemsOfWishlistApiFp(configuration).addItemOfWishlistById(body, wishlistId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AddToCartAllItemsOfWishlistRequest} body An action object
         * @param {number} wishlistId ID of wishlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addToCartAllItemsOfWishlist(body: AddToCartAllItemsOfWishlistRequest, wishlistId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<ExecuteActionsOnItemsOfWishlistResponse>> {
            return ItemsOfWishlistApiFp(configuration).addToCartAllItemsOfWishlist(body, wishlistId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AddToCartItemOfWishlistRequest} body An action object
         * @param {number} wishlistId ID of wishlist
         * @param {number} itemId ID of item from wishlist to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addToCartItemOfWishlist(body: AddToCartItemOfWishlistRequest, wishlistId: number, itemId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<ExecuteActionsOnItemsOfWishlistResponse>> {
            return ItemsOfWishlistApiFp(configuration).addToCartItemOfWishlist(body, wishlistId, itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BatchAddToCartItemsOfWishlistRequest} body An action object
         * @param {number} wishlistId ID of wishlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async batchAddToCartItemsOfWishlist(body: BatchAddToCartItemsOfWishlistRequest, wishlistId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<ExecuteActionsOnItemsOfWishlistResponse>> {
            return ItemsOfWishlistApiFp(configuration).batchAddToCartItemsOfWishlist(body, wishlistId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BatchDeleteItemsOfWishlistRequest} body An action object
         * @param {number} wishlistId ID of wishlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async batchDeleteItemsOfWishlist(body: BatchDeleteItemsOfWishlistRequest, wishlistId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<ExecuteActionsOnItemsOfWishlistResponse>> {
            return ItemsOfWishlistApiFp(configuration).batchDeleteItemsOfWishlist(body, wishlistId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} itemId ID of item from wishlist to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteItemOfDefaultWishlistById(itemId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ItemsOfWishlistApiFp(configuration).deleteItemOfDefaultWishlistById(itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} wishlistId ID of wishlist
         * @param {number} itemId ID of item from wishlist to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteItemOfWishlistById(wishlistId: number, itemId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ItemsOfWishlistApiFp(configuration).deleteItemOfWishlistById(wishlistId, itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} wishlistId ID of wishlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllItemOfWishlist(wishlistId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<ExtendedItemOfWishlist>>> {
            return ItemsOfWishlistApiFp(configuration).getAllItemOfWishlist(wishlistId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} wishlistId ID of wishlist
         * @param {number} itemId ID of item from wishlist to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemOfWishlistById(wishlistId: number, itemId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<ItemOfWishlist>> {
            return ItemsOfWishlistApiFp(configuration).getItemOfWishlistById(wishlistId, itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ReorderItemsOfWishlistRequest} body An action object
         * @param {number} wishlistId ID of wishlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reorderItemsOfWishlist(body: ReorderItemsOfWishlistRequest, wishlistId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<ExecuteActionsOnItemsOfWishlistResponse>> {
            return ItemsOfWishlistApiFp(configuration).reorderItemsOfWishlist(body, wishlistId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ItemOfWishlistRequest} body A wishlist item object that needs to be updated
         * @param {number} wishlistId ID of wishlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateItemOfWishlistById(body: ItemOfWishlistRequest, wishlistId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<ItemOfWishlist>> {
            return ItemsOfWishlistApiFp(configuration).updateItemOfWishlistById(body, wishlistId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ItemsOfWishlistApi - object-oriented interface
 * @export
 * @class ItemsOfWishlistApi
 * @extends {BaseAPI}
 */
export class ItemsOfWishlistApi extends BaseAPI {
    /**
     * 
     * @param {AddIntoDefaultWishlistRequest} body A wishlist item object that needs to be added
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsOfWishlistApi
     */
    public async addItemIntoDefaultWishlist(body: AddIntoDefaultWishlistRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<ItemOfWishlist>> {
        return ItemsOfWishlistApiFp(this.configuration).addItemIntoDefaultWishlist(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {ItemOfWishlistRequest} body A wishlist item object that needs to be added
     * @param {number} wishlistId ID of wishlist
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsOfWishlistApi
     */
    public async addItemOfWishlistById(body: ItemOfWishlistRequest, wishlistId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<ItemOfWishlist>> {
        return ItemsOfWishlistApiFp(this.configuration).addItemOfWishlistById(body, wishlistId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {AddToCartAllItemsOfWishlistRequest} body An action object
     * @param {number} wishlistId ID of wishlist
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsOfWishlistApi
     */
    public async addToCartAllItemsOfWishlist(body: AddToCartAllItemsOfWishlistRequest, wishlistId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<ExecuteActionsOnItemsOfWishlistResponse>> {
        return ItemsOfWishlistApiFp(this.configuration).addToCartAllItemsOfWishlist(body, wishlistId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {AddToCartItemOfWishlistRequest} body An action object
     * @param {number} wishlistId ID of wishlist
     * @param {number} itemId ID of item from wishlist to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsOfWishlistApi
     */
    public async addToCartItemOfWishlist(body: AddToCartItemOfWishlistRequest, wishlistId: number, itemId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<ExecuteActionsOnItemsOfWishlistResponse>> {
        return ItemsOfWishlistApiFp(this.configuration).addToCartItemOfWishlist(body, wishlistId, itemId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {BatchAddToCartItemsOfWishlistRequest} body An action object
     * @param {number} wishlistId ID of wishlist
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsOfWishlistApi
     */
    public async batchAddToCartItemsOfWishlist(body: BatchAddToCartItemsOfWishlistRequest, wishlistId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<ExecuteActionsOnItemsOfWishlistResponse>> {
        return ItemsOfWishlistApiFp(this.configuration).batchAddToCartItemsOfWishlist(body, wishlistId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {BatchDeleteItemsOfWishlistRequest} body An action object
     * @param {number} wishlistId ID of wishlist
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsOfWishlistApi
     */
    public async batchDeleteItemsOfWishlist(body: BatchDeleteItemsOfWishlistRequest, wishlistId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<ExecuteActionsOnItemsOfWishlistResponse>> {
        return ItemsOfWishlistApiFp(this.configuration).batchDeleteItemsOfWishlist(body, wishlistId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} itemId ID of item from wishlist to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsOfWishlistApi
     */
    public async deleteItemOfDefaultWishlistById(itemId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ItemsOfWishlistApiFp(this.configuration).deleteItemOfDefaultWishlistById(itemId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} wishlistId ID of wishlist
     * @param {number} itemId ID of item from wishlist to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsOfWishlistApi
     */
    public async deleteItemOfWishlistById(wishlistId: number, itemId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ItemsOfWishlistApiFp(this.configuration).deleteItemOfWishlistById(wishlistId, itemId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} wishlistId ID of wishlist
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsOfWishlistApi
     */
    public async getAllItemOfWishlist(wishlistId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<ExtendedItemOfWishlist>>> {
        return ItemsOfWishlistApiFp(this.configuration).getAllItemOfWishlist(wishlistId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} wishlistId ID of wishlist
     * @param {number} itemId ID of item from wishlist to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsOfWishlistApi
     */
    public async getItemOfWishlistById(wishlistId: number, itemId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<ItemOfWishlist>> {
        return ItemsOfWishlistApiFp(this.configuration).getItemOfWishlistById(wishlistId, itemId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {ReorderItemsOfWishlistRequest} body An action object
     * @param {number} wishlistId ID of wishlist
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsOfWishlistApi
     */
    public async reorderItemsOfWishlist(body: ReorderItemsOfWishlistRequest, wishlistId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<ExecuteActionsOnItemsOfWishlistResponse>> {
        return ItemsOfWishlistApiFp(this.configuration).reorderItemsOfWishlist(body, wishlistId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {ItemOfWishlistRequest} body A wishlist item object that needs to be updated
     * @param {number} wishlistId ID of wishlist
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsOfWishlistApi
     */
    public async updateItemOfWishlistById(body: ItemOfWishlistRequest, wishlistId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<ItemOfWishlist>> {
        return ItemsOfWishlistApiFp(this.configuration).updateItemOfWishlistById(body, wishlistId, options).then((request) => request(this.axios, this.basePath));
    }
}
